// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }
        # 背景颜色
        backgroundColor: { 
          value: [1.0, 1.0, 0.0, 1.0], 
          editor: { 
            type: color,
            tooltip: "背景颜色"
          } 
        }
        backgroundSize: {
          value: [1.00 ,1.00],
          editor: {
            tooltip: "背景范围",
          }
        }
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common/common-define>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif
    color = a_color;

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <builtin/internal/embedded-alpha>
  #include <builtin/internal/alpha-test>

  in vec4 color;

  uniform pramas {
    vec4 backgroundColor;
    vec2 backgroundSize;
  };

  #if USE_TEXTURE
    in vec2 uv0;
    #pragma builtin(local)
    layout(set = 2, binding = 12) uniform sampler2D cc_spriteTexture;
  #endif

  vec4 frag () {
    vec4 o = vec4(0, 0, 0, 0);

    #if USE_TEXTURE
      vec4 texture_color = CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);

          if( texture_color.a < 1.0 ) {
              o.rgb = color.rgb;
              o.a = texture_color.a * color.a;
              #if USE_BACKGROUND
                if(uv0.x < backgroundSize.x &&
                  uv0.x > 1.0 - backgroundSize.x &&
                  uv0.y < backgroundSize.y &&
                  uv0.y > 1.0 - backgroundSize.y){
                  float alpha = o.a + backgroundColor.a * (1.0 - o.a);
                  o.rgb = (o.rgb * o.a + backgroundColor.rgb * backgroundColor.a * (1.0 - o.a)) / alpha;
                  o.a = alpha;
                }
              #endif
          } else {
            o = vec4(color.r,color.g,color.b,texture_color.a * color.a);
          }

      #if IS_GRAY
        float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;
        o.r = o.g = o.b = gray;
      #endif
    #endif

    ALPHA_TEST(o);
    return o;
  }
}%